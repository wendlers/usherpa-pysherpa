uSherpa pysherpa Library GETTING STARTED 
===========================================
24.08.2012 Stefan Wendler
sw@kaltpost.de

This document describes the basic usage of the pysherpa client library for uSherpa. 


Prerequisites
-------------

It is assumed, that the following is in place:

* Python >= 2.6 
* A copy of the uSherpa pysherpa library distribution
* A copy of the uSherpa firmware for the TI Launchpad
* A TI Launchpad equipped with the MSP430G2553 connected to the USB 
  port of your PC, and the serial port it is using is known.


Flashing the Firmware to your Launchpad
---------------------------------------

See the documentation from the uSherpa firmware:

  	https://github.com/wendlers/usherpa-firmware/tree/master/doc  


Installing the uSherpa pysherpa Library
---------------------------------------

Get yourself a copy of the pysherpa Python library. The easiest way is to git clone 
the pysherpa repository:

  	git clone https://github.com/wendlers/usherpa-pysherpa.git

This will create the directory "usherpa-pysherpa" for you. Change to this directory 
and issue the follwing to install the pysherpa library on your machine:

  	sudo python setup.py install


** Check the Installation

You could check if everything went well with the installation by entering a Python 
shell with:

  	python

Now check if you are able to import the pysherpa libraries:

	import usherpa.comm
  	import usherpa.api

Both commands should be silently acceped (no errors should be reported).


Basic API Usage
---------------

In the following sub-section it will be shown, how the API basics work. We create a 
python-script which blinks the build nLED on pin 1.0 of the Launchpad.


** Import "uSherpa" Functionality

Every program that wishes to use uSherpa functionality must import the corresponding
library packet. This is done by using the following import statements: 

	from usherpa.api import *
	from usherpa.serialcomm import *

The first one imports the uSherpa API, the second one imports the serial transport
needed to access the Launchpad through its serial line.


** Create an API Instance

Next an API instance is needed. The instance needs to know which transport to use
for communicating with the MCU. Thus, a packet stream for the serial line has to 
be created fitst:

	ps = SerialPacketStream("/dev/ttyACM0")

The packet stream takes the port where your Launchpad is connected to as input
parameter. After the instance has been created, the receiver thread needs to be
started:

	ps.start()

Now the API instance could be created with the following statement:

	us = uSherpa(ps)


** Configure the PIN Functionality

Now that we have a connection to the MCU established, we need to tell the MCU
what pins we like to use, and what functionality we intend these pins to perform. 

The following code snipped shows how to configure the build in LED on pin 1.0
of the Launchpad as an digital output: 

	us.pinMode(uSherpa.PIN_1_0, uSherpa.OUTPUT)

The API operation to configure pin functionality is "pinMode". It takes two parameters: 
the pin to configure and the function which should be set for that pin. 


** Perform an Operation on a Pin 

With our pin configured successfully as digital output, its state (high/low) could be changed
by using the "digitalWrite" API functionality: 

/**
 * draw is called cyclic from processing
 */
void draw() {
  try {
    // toggle pin 1.0 between high/low state (LED on/off)
    r.digitalWrite(uSherpa.PIN_1_0, uSherpa.TOGGLE);
  }
  catch(Exception e) {
     // If something goes wrong while communication with the MCU
     // the catch block will be processed. Here the error handling
     // should be done. 
     println(e.getMessage());
	exit();
  }
  
  // wait a little 
  delay(500);
}

As for the other uSherpa API functions, digitalWrite could also thrown an exception if
something went wrong. E.g. communication to the MCU could break down, or you where trying
to perform an operation on a PIN for which it was not configured. E.g. if you configured 
your pin for analog input, ant then later on try to perform a digital write on that pin, 
an exception will be thrown. 

"digitalWrite" takes two parameters, the PIN to which to write, and the status. The 
status is one of "uSherpa.HIGH", "uSherpa.LOW" or "uSherpa.TOGGLE". 
 

** The Complete Sketch

Our complete sketch which blinks the LED on P1.0 then looks like this:


  // import uSherpa API
  import de.kaltpost.jsherpa.processing.*;

  // our instance of the uSherpa API referenced through variable r
  uSherpa r;

  /**
   * setup function called by processing on startup
   */
  void setup() {  
    try {
	  // connect to MCU, replace "/dev/ttyACM0" with you virtual COM port
      r = new uSherpa(this, "/dev/ttyACM0");
    
      // configure p1.0 (build in LED) as digital output, initially set HIGH
      r.pinMode(uSherpa.PIN_1_0, uSherpa.OUTPUT);
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
	  exit();
    }
  }

  /**
   * draw is called cyclic from processing
   */
  void draw() {
    try {
      // toggle pin 1.0 between high/low state (LED on/off)
      r.digitalWrite(uSherpa.PIN_1_0, uSherpa.TOGGLE);
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
      exit();
    }
  
    // wait a little 
    delay(500);
  }


Digital Input
-------------

In the previous section we configured a pin for digital output. Now we will 
have a look on how to use digital input. In this example we are going to 
configure pin 1.3 (the build in user button on the Launchpad) as digital input,
and then read in its current state. 


** Import "processingreocket" Functionality

see "Basic API Usage"


** Create an API Instance

see "Basic API Usage"


** Configure the PIN Functionality

For configuring the pins functionality, again "pinMode" is used. This time we want 
the pin 1.3 to be in mode "uSherpa.INPUT":

 // set P1.3 as digital input
 r.pinMode(uSherpa.PIN_1_3, uSherpa.INPUT);

uSherpa knows three different input configuration one could assign to pin:

INPUT    : It is assumed, that an external pull-up/down resistor is provided. 
           This mode is often referred as floating. The internal button on P1.3
           on the Launchpad has an external pull-up resistor.  

PULLUP   : Internal pull-up resistor is enabled. Thus, initial state is high, 
           and e.g. a connected button must connect to ground if closed. 

PULLDOWN : Internal pull-down resistor is enabled. Thus, initial state is low, 
           and e.g. a connected button must connect to VCC if closed. 


** Perform an Operation on a Pin 

The operation that could be performed on a pin configured as digital input is 
"digitalRead". The function takes as argument a pin for which to perform the 
read and returns the current state of the pin (high or low). E.g. to check if
button at pin 1.3 is pressed, we could do the following: 

  // read pin 1.3 until state changed form high to low
  if(r.digitalRead(uSherpa.PIN_1_3) == uSherpa.LOW) {
    println("Button pressed!");
  }
	

** The Complete Sketch

Our complete sketch which checks if button on  P1.3 was pressed may look like this:


  // import uSherpa API
  import de.kaltpost.jsherpa.processing.*;

  // our instance of the uSherpa API referenced through variable r
  uSherpa r;

   /**
    * setup function called by processing on startup
    */
   void setup() {  
     try {
 	  // connect to MCU, replace "/dev/ttyACM0" with you virtual COM port
        r = new uSherpa(this, "/dev/ttyACM0");
    
        // set P1.3 as digital input
        r.pinMode(uSherpa.PIN_1_3, uSherpa.INPUT);
     }
     catch(Exception e) {
        // If something goes wrong while communication with the MCU
        // the catch block will be processed. Here the error handling
        // should be done. 
        println(e.getMessage());
        exit();
      }
   }

  /**
   * draw is called cyclic from processing
   */
  void draw() {
    try {
      // read pin 1.3 until state changed form high to low
      if(r.digitalRead(uSherpa.PIN_1_3) == uSherpa.LOW) {
        println("Button pressed!");
      }
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
      exit();
    }
    delay(100);
  }


External Interrupts
-------------------

Since polling the state of an digital input is not very elegant nor very performant, 
one could configure uSherpa to send and interrupt every time a monitored pin changes 
its state. To receive such an interrupt, one has to override the interrupt handler
by deriving a class from the uSherpa API class. 

** Import "processingreocket" Functionality

see "Basic API Usage"


** Create an API Instance

see "Basic API Usage"


** Configure the PIN Functionality

First, pin 1.3 has to be configured to be an input:
 
  // set P1.3 as digital input
  r.pinMode(uSherpa.PIN_1_3, uSherpa.INPUT);

Additionally we use "" to configure interrupting for this pin. "" takes two argument: 
the pin for which to receive interrupts, and the for which state change to receive interrupts.

  // enable external interrupt for p1.3 on high-low transition
   r.externalInterrupt(uSherpa.PIN_1_3, uSherpa.EDGE_HIGHLOW);

The API knows the following state change conditions: 

EDGE_HIGHLOW   state on input changed from high to low

EDGE_LOWHIGH   state on input changed from low to high

EDGE_NONE      disables previously enabled interrupting 


** Write the Interrupt Handler

Writing the interrupt handler is as simple as deriving a new class from uSherpa
and then providing out own implementation of "externalInterrupt". Every time an
external interrupt happens, this operation is called through the API. The pin on
which the interrupt happened is passed in as parameter. In out sketch we now use 
"MyuSherpa" instead of "uSherpa".


  /**
   * We derive a class from uSherpa to override the
   * event handler for the external interrupt.
   */
  class MyuSherpa extends uSherpa {
    
    /**
     * Constructor just passes values to parent class
     */
    MyuSherpa(PApplet applet, String port) throws Exception {
      super(applet, port);
    }
  
    /**
     * Interrupt handler, called every time p1.3 goes from high to low
      */
    void externalInterrupt(short pin) {
      // The pin returned is in HEX notation. E.g. pin 1.3 is 0x13 in HEX,
      // and 19 in dec.  
      println("External interrupt on PIN: " + pin);
    }  
  }


** The Complete Sketch

Our complete sketch which handles presses on button on  P1.3 may look like this:


  // import uSherpa API
  import de.kaltpost.jsherpa.processing.*;

  // our instance of the uSherpa API referenced through variable r
  // note that we use our extended class here
  MyuSherpa r;

  /**
   * setup function called by processing on startup
   */
  void setup() {  
    try {
	  // connect to MCU, replace "/dev/ttyACM0" with you virtual COM port
      // note that we use our extended class here
      r = new MyuSherpa(this, "/dev/ttyACM0");
    
      // set P1.3 as digital input
      r.pinMode(uSherpa.PIN_1_3, uSherpa.INPUT);

      // enable external interrupt for p1.3 on high-low transition
      r.externalInterrupt(uSherpa.PIN_1_3, uSherpa.EDGE_HIGHLOW);
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
      exit();
    }
  }

  /**
   * We derive a class from uSherpa to override the
   * event handler for the external interrupt.
   */
  class MyuSherpa extends uSherpa {
    
    /**
     * Constructor just passes values to parent class
     */
    MyuSherpa(PApplet applet, String port) throws Exception {
      super(applet, port);
    }
  
    /**
     * Interrupt handler, called every time p1.3 goes from high to low
     */
    void externalInterrupt(short pin) {
      // The pin returned is in HEX notation. E.g. pin 1.3 is 0x13 in HEX,
      // and 19 in dec.  
      println("External interrupt on PIN: " + pin);
    }  
  }


Analog Input
------------

With a pin configured for analog input, it is possible to measure a voltage on 
that pin between 0 and VCC (where VCC ~3.3V on the Launchpad powered through USB). 
For example a analog input could be used to measure the position of a potentiometer. 
In order to be able to vary the voltage on pin 1.5 in out next example, the output
of a 10k potentiometer to be connected to pin 1.5. The other two pins of the
potentiometer are connected between VCC and GND. 
 

** Import "processingreocket" Functionality

see "Basic API Usage"


** Create an API Instance

see "Basic API Usage"


** Configure the PIN Functionality

The pin is set to analog input by using the "pinMode" method and assigning
uSherpa.ANALOG:

  // configure p1.5 for analog input
  r.pinMode(uSherpa.PIN_1_5, uSherpa.ANALOG);

Note: not all pins of the Launchpad are able to perform analog readings.
Only pins 1.0 to 1.7 are allowed for analog input. Choosing anything else
will throw an exception. 
 

** Perform an Operation on a Pin 

Next we could use "analogRead" to make the MCU sample the input and return th value.
"analogRead" takes a single parameter, the pin for which to perform the read:

  // perform analog read on p1.5
  short a = r.analogRead(uSherpa.PIN_1_5);

The MSP430 has an 10Bit ADC (Analog Digital Converter), thus the maximum value it
could provide is 2^10 = 1024. To convert that value to an voltage, the following
calculation could be used: 

  // convert value from analog read to volts: 
  // - assuming VCC = Vmax = 3.3V
  // - max value from analog read is 2^10 = 1024
  float v = (float) ((3.3 / 1024.0) * (float)a);
    

** The Complete Sketch

Our complete sketch which samples pin 1.5 continuously might look like this:

  // import uSherpa API
  import de.kaltpost.jsherpa.processing.*;

  // our instance of the uSherpa API referenced through variable r
  uSherpa r;

   /**
    * setup function called by processing on startup
    */
   void setup() {  
     try {
 	  // connect to MCU, replace "/dev/ttyACM0" with you virtual COM port
        r = new uSherpa(this, "/dev/ttyACM0");
    
        // configure p1.5 for analog input
        r.pinMode(uSherpa.PIN_1_5, uSherpa.ANALOG);
     }
     catch(Exception e) {
        // If something goes wrong while communication with the MCU
        // the catch block will be processed. Here the error handling
        // should be done. 
        println(e.getMessage());
        exit();
      }
   }

  /**
   * draw is called cyclic from processing
   */
  void draw() {
    try {
       // perform analog read on p1.5
       short a = r.analogRead(uSherpa.PIN_1_5);

       // convert value from analog read to volts: 
       // - assuming VCC = Vmax = 3.3V
       // - max value from analog read is 2^10 = 1024
       float v = (float) ((3.3 / 1024.0) * (float)a);

       println("~ volts: " + v + " (" + a + ")");
     }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
      exit();
    }
    delay(100);
  }


Pulse Width Modulation
----------------------

With pulse width modulation, it is possible to produce a signal on an output witch
switches from high to low within a defined period for a defined time. This could be
used e.g. to control the speed of DC motors, operate servos or dim the light of an
LED. Lets first have a look at the output signal produces by an PWM to understand 
the basic terms we are going to use later on: 

     | dc |  - = 10usec.
     |    |       |
HIGH +----+    +----+    +----+    +----+
     |    |    |    |    |    |    |    |
LOW  +    +----+    +----+    +----+    +
     |         |
     | period  | 

The time after which the output wave form starts again is called "period". The period in
uSherpa is defined in usec. The time for which the output is kept high within the
period is called duty-cycle (dc) and it is given in percent (of the period) in 
uSherpa. The above figure shows a PWM with an period of 80usec. and a duty-cycle
of 50% which is 40usec. Thus a dc of 0% means the output is completely switched off,
and a dc of 100% means, the output is switched on permanently. The effect for all
between 0 and 100% is, that e.g. a DC motor or a LED sees the average voltage which 
results form the on/off ratio. If, for example we have an HIGH voltage of 3.3V, and 
a duty-cycle of 50%, this looks for a LED like 1.65V. If the period is chosen small
enough, the eye for example will not realize, that the LED in reality is switched on
and off very fast (on the other hand, if you choose the period very big, the on/off
will be realized as blinking).  

In the next example we will dim the build in LED on pin 1.6 up and down (to get 
a pulse effect).

** Import "processingreocket" Functionality

see "Basic API Usage"


** Create an API Instance

see "Basic API Usage"


** Configure the PIN Functionality

  // configure p1.6 (build in LED) as PWM output
  r.pinMode(uSherpa.PIN_1_6, uSherpa.PWM);

Note, that only a few pins on the MSP430G2553 are able to perform hardware PWM:
P1.2, P1.6, P2.1 and P2.2. Trying to configure any other pin for PWM will result
in an exception. Also be aware of the fact, that for each port (1 or 2) only one
pin out of the two available could produce a PWM at a time. Thus, if you configured
P2.1 for PWM, you could not configure P2.2 as PWM at the same time. But it is
valid, to e.g. configure P1.6 and P2.2 for PWM at the same time. 


** Set PWM Period 

Next, we need to configure the PWM period. This is done through the "pwmPeriod" function
which takes two arguments: the pin for which to set the period, and the periods duration
in usec.

  // set PWM period to 1000us on pin 1.6 
  r.pwmPeriod(uSherpa.PIN_1_6, 1000);
 

** Set PWM Duty-Cycle

To adjust the PWM duty-cycle the "pwmDuty" operation is used. This operation takes 
the pin for which to configure the duty-cycle, and the duty-cycle in percent. 

   // set duty cycle to 50%
   r.pwmDuty(uSherpa.PIN_1_6, 0x80);

Note, that the duty cycle percentage goes from 0 to 0xFF, and that 0xFF means 100%.
Thus, the value to pass to "pwmDuty" is: percentage * (0xFF / 100).


** The Complete Sketch

The following sketch fades the build in LED on P1.6 up/down by using hardware PWM:

  // import uSherpa API
  import de.kaltpost.jsherpa.processing.*;

  // our instance of the uSherpa API referenced through variable r
  uSherpa r;

  // current duty cycle
  short dc  = 0;

  // direction in which to increase/decrease the duty cycle
  short dir = 3;

  /**
   * setup function called by processing on startup
   */
  void setup() {  
    try {
      // connect to MCU
      r = new uSherpa(this, "/dev/ttyACM0");
    
      // configure p1.6 (build in LED) as PWM output
      r.pinMode(uSherpa.PIN_1_6, uSherpa.PWM);
    
      // set PWM period to 1000us on pin 1.6 
      r.pwmPeriod(uSherpa.PIN_1_6, 1000);
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
	  exit();
    }
  }

  /**
   * draw is called cyclic from processing
   */
  void draw() {
    try {
    
      // modifiy duty cycle
      dc += dir;
    
      // if max. duty cycle (0xFF) reached, reverse direction
      if(dc >= 0xFF) {
         dir *= -1;
         // make sure DC is still valid
         dc = 0xFF;
      }
      // if min. duty cycle (0x00) reached, reverse direction
      else if(dc <= 0x00) {
         dir *= -1;
         // make sure DC is still valid
         dc = 0x00;
      }
   
      // write modified DC   
      r.pwmDuty(uSherpa.PIN_1_6, dc);
    }
    catch(Exception e) {
      // If something goes wrong while communication with the MCU
      // the catch block will be processed. Here the error handling
      // should be done. 
      println(e.getMessage());
	  exit();
    }
  }
